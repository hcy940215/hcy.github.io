<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天之骄子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hcydev.com/"/>
  <updated>2019-05-29T15:59:56.865Z</updated>
  <id>http://hcydev.com/</id>
  
  <author>
    <name>hcy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kotlin基础-扩展函数与扩展属性</title>
    <link href="http://hcydev.com/2019/05/29/"/>
    <id>http://hcydev.com/2019/05/29/</id>
    <published>2019-05-29T14:49:02.000Z</published>
    <updated>2019-05-29T15:59:56.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>在<code>kotlin</code> 中，能够扩展一个类的新功能而无需继承该类，它是一个类的成员函数，不过是定义来类的外面，下面声明一个扩展函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span>:<span class="built_in">Char</span> = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="keyword">this</span>.length-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>扩展的类或接口需要放到声明的函数前面，这个类的名称叫作<strong>接收者类型</strong> ，调用这个函数的对象叫作<strong>接收者对象</strong>。</p><p>接收者类型是由扩展函数定义的，接收者对象是该类型的一个实例。可以像普通成员函数一样调用这个函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">"Kotlin"</span>.lastChar()</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>String</code>是接收者类型，而<code>Kotlin</code>就是接收者对象。</p><p>在这个扩展函数中，可以像其他成员函数一样使用<code>this</code>，也可以像普通的成员函数一样，省略<code>this</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span>:<span class="built_in">Char</span> = <span class="keyword">get</span>(length-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在扩展函数中，可以直接访问被扩展的类的其他成员方法和属性，但是扩展函数不允许打破它的封装性，和在内部定义方法不同的是，扩展函数不能访问私有的或者受保护的成员。</p><p>在Java中使用扩展函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char kotlin = StringUtil.lastChar(<span class="string">"KOTLIN"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(kotlin);</span><br></pre></td></tr></table></figure><p>因为扩展函数声明成了顶层函数，它会编译成静态函数，在<code>Java</code> 中导入类名即可直接调用。</p><h4 id="不可重写的扩展函数"><a href="#不可重写的扩展函数" class="headerlink" title="不可重写的扩展函数"></a>不可重写的扩展函数</h4><p>在kotlin中不能重写扩展函数。看下面的例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">click</span><span class="params">()</span></span> = println(<span class="string">"View click"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span>: <span class="type">View</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">click</span><span class="params">()</span></span> = println(<span class="string">"Button click"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">val</span> view:View = Button()</span><br><span class="line">&gt;&gt;&gt; view.click()</span><br><span class="line">Button click</span><br></pre></td></tr></table></figure><p>Java的多态性我们都知道，是一个父类类型指向了子类的实例，当调用这个实例的<code>click</code>函数时，会调用到子类的<code>click</code>函数。但是对于扩展函数来说，并不是这样的，下面分别声明在<code>View</code>和<code>Button</code> 的扩展函数<code>showOff</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">showOff</span><span class="params">()</span></span> = println(<span class="string">"View showOff"</span>)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> Button.<span class="title">showOff</span><span class="params">()</span></span> = println(<span class="string">"Button showOff"</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">val</span> view:View = Button()</span><br><span class="line">&gt;&gt;&gt; view.showOff()</span><br><span class="line">View showOff</span><br></pre></td></tr></table></figure><p>我们发现，当调用<code>View</code> 类型的变量的<code>showOff</code> 时，相对应的扩展函数会被调用，尽管它指向一个子类<code>Button</code> 的实例。这是为什么呢？上文中提到，扩展函数会被编译成静态函数，接手值作为第一个参数，看下反编译后的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> void showOff(<span class="meta">@NotNull</span> View $<span class="keyword">this</span>$showOff) &#123;</span><br><span class="line">   String var1 = <span class="string">"View showOff"</span>;</span><br><span class="line">   System.<span class="keyword">out</span>.println(var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用处</span></span><br><span class="line">      View view = (View)(new Button());</span><br><span class="line">      view.click();</span><br><span class="line">      showOff(view);</span><br></pre></td></tr></table></figure><p>所有kotlin中扩展函数并不存在重写，因为会被当做静态函数对待。如果定义的成员函数与扩展函数同名，成员函数会被优先使用。</p><h2 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;扩展函数&quot;&gt;&lt;a href=&quot;#扩展函数&quot; class=&quot;headerlink&quot; title=&quot;扩展函数&quot;&gt;&lt;/a&gt;扩展函数&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;kotlin&lt;/code&gt; 中，能够扩展一个类的新功能而无需继承该类，它是一个类的成员函数，不过是定义来类的外
      
    
    </summary>
    
      <category term="kotlin基础" scheme="http://hcydev.com/categories/kotlin%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>kotlin基础-命名参数与默认值</title>
    <link href="http://hcydev.com/2019/05/27/"/>
    <id>http://hcydev.com/2019/05/27/</id>
    <published>2019-05-27T14:11:47.000Z</published>
    <updated>2019-05-28T01:35:45.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p>在<code>kotlin中</code>，调用一个函数时，可以显示的指明参数的名称。如果指明了一个参数名称，为了避免混淆，它之后的所有参数都需要标明名称。</p><p>下面这个函数<code>joinToString</code> 的作用是通过在元素之间添加分隔符，在最前面添加前缀，末尾添加后缀的方式把集合添加到一个<code>StringBuilder</code>中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;, separator: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                     prefix: <span class="type">String</span>, postfix: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> builder = StringBuilder(prefix)</span><br><span class="line">    <span class="keyword">for</span> ((index, element) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) builder.append(separator)</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(postfix)</span><br><span class="line">    <span class="keyword">return</span> builder.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = arrayListOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">println(joinToString(list, <span class="string">";"</span>, <span class="string">"("</span>, <span class="string">")"</span>))</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>当不了解函数内部实现时，可能不了解后面三个参数的含义，在<code>java</code> 中可以添加注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">String s = Chapter2Kt.joinToString(list,<span class="comment">/* separator */</span><span class="string">" "</span>,<span class="comment">/* prefix */</span><span class="string">" "</span>,<span class="comment">/* postfix */</span><span class="string">" "</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>在kotlin中可以更加简洁，可以使用命名参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joinToString(list, separator = <span class="string">","</span>, prefix = <span class="string">"("</span>, postfix = <span class="string">")"</span>)</span><br></pre></td></tr></table></figure><p>在处理默认参数值的时候，命名参数特别有用。下面看下默认参数</p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>带有默认参数的函数声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                     separator: <span class="type">String</span> = <span class="string">","</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                     prefix: <span class="type">String</span> = <span class="string">"("</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                     postfix: <span class="type">String</span> = <span class="string">")"</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> builder = StringBuilder(prefix)</span><br><span class="line">    <span class="keyword">for</span> ((index, element) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) builder.append(separator)</span><br><span class="line">        builder.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(postfix)</span><br><span class="line">    <span class="keyword">return</span> builder.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用带有默认值的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">println(joinToString(list, separator = <span class="string">","</span>, prefix = <span class="string">" "</span>, postfix = <span class="string">" "</span>))</span><br><span class="line"> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> </span><br><span class="line">println(joinToString(list, separator = <span class="string">":"</span>, prefix = <span class="string">"("</span>))</span><br><span class="line">(<span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>)</span><br><span class="line">println(joinToString(list, separator = <span class="string">"&lt;--&gt;"</span>))</span><br><span class="line">(<span class="number">1</span>&lt;--&gt;<span class="number">2</span>&lt;--&gt;<span class="number">3</span>)</span><br><span class="line">println(joinToString(list))</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：当常规的调用函数时，必须按照函数定义的参数顺序来给定参数，可以省略只排在末尾的参数，如果使用命名参数就可以省略中间的参数，也可以任意顺序给定命名参数。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(joinToString(list, postfix = <span class="string">"]"</span>, separator = <span class="string">":"</span>, prefix = <span class="string">"["</span>))</span><br></pre></td></tr></table></figure><p>带有默认值的函数是被编码到被调用的函数中，不是调用的地方，看下反编译的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//调用命名参数反编译的代码</span></span><br><span class="line">Collection var14 = (Collection)list;</span><br><span class="line">      var6 = <span class="string">"["</span>;</span><br><span class="line">      String var7 = <span class="string">":"</span>;</span><br><span class="line">      String var8 = <span class="string">"]"</span>;</span><br><span class="line">      var6 = joinToString(var14, var7, var6, var8);</span><br><span class="line">      System.out.println(var6);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有默认值函数反编译的代码</span></span><br><span class="line"><span class="comment">// $FF: synthetic method</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String joinToString$<span class="keyword">default</span>(Collection var0, String var1, String var2, String var3, <span class="keyword">int</span> var4, Object var5) &#123;</span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var1 = <span class="string">","</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var2 = <span class="string">"("</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">8</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var3 = <span class="string">")"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> joinToString(var0, var1, var2, var3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java中没有默认值函数，在java中调用时必须显示的指明所有参数。如果希望java中调用更简洁，可以使用@JvmOverloads注解它，编译器会生成对应的重载函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $FF: synthetic method</span></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String joinToString$<span class="keyword">default</span>(Collection var0, String var1, String var2, String var3, <span class="keyword">int</span> var4, Object var5) &#123;</span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var1 = <span class="string">","</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var2 = <span class="string">"("</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((var4 &amp; <span class="number">8</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">      var3 = <span class="string">")"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> joinToString(var0, var1, var2, var3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">joinToString</span><span class="params">(@NotNull Collection collection, @NotNull String separator, @NotNull String prefix)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> joinToString$<span class="keyword">default</span>(collection, separator, prefix, (String)<span class="keyword">null</span>, <span class="number">8</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">joinToString</span><span class="params">(@NotNull Collection collection, @NotNull String separator)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> joinToString$<span class="keyword">default</span>(collection, separator, (String)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, <span class="number">12</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">joinToString</span><span class="params">(@NotNull Collection collection)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> joinToString$<span class="keyword">default</span>(collection, (String)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, (String)<span class="keyword">null</span>, <span class="number">14</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶层函数"><a href="#顶层函数" class="headerlink" title="顶层函数"></a>顶层函数</h2><p>在java中，函数的声明必须在类里面，而在kotlin中，这些函数声明可以放在文件的顶层，依然属于包内成员，如果在包外访问，则需要<code>import</code>。示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> strings</span><br><span class="line"><span class="keyword">import</span> java.lang.StringBuilder</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(...)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这段代码会被编译成文件名+Kt，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter2Kt</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> static <span class="keyword">final</span> String joinToString(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件中的所有的顶层函数被编译成对应的静态函数，在Java中可以向其他静态函数一样使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chapter2Kt.joinToString(list,<span class="comment">/* separator */</span><span class="string">" "</span>,<span class="comment">/* prefix */</span><span class="string">" "</span>,<span class="comment">/* postfix */</span><span class="string">" "</span>);</span><br></pre></td></tr></table></figure><p>也可以更改文件类名，在包的声明之前使用注解<code>@file:JvmName(&quot;StringUtil&quot;)</code> 可任意命名。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">"StringUtil"</span>)</span><br><span class="line"><span class="keyword">package</span> strings</span><br><span class="line"><span class="keyword">import</span> java.lang.StringBuilder</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(...)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java中调用</span></span><br><span class="line">StringUtil.joinToString()</span><br></pre></td></tr></table></figure><h2 id="顶层属性"><a href="#顶层属性" class="headerlink" title="顶层属性"></a>顶层属性</h2><p>和顶层函数一样，属性也可以放到文件的顶层。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">10</span> <span class="comment">//声明顶层属性</span></span><br></pre></td></tr></table></figure><p>这段代码会被被译成静态属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static int count;</span><br><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> int getCount() &#123;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> void setCount(int var0) &#123;</span><br><span class="line">   count = var0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是<code>var</code>(可变属性)，所以生成了对应的<code>getter</code>和<code>setter</code>方法。如果声明成<code>val</code>(不可变属性)就会只生成<code>getter</code> 。在java中调用对应的<code>getter</code>和<code>setter</code>方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtil.getCount();</span><br></pre></td></tr></table></figure><p>默认情况下，顶层属性和其他属性一样是通过访问其暴露给<code>java</code> 调用的，如果以常量暴露给java，需要用<code>const</code> 修饰(适用于基本数据类型和String类型)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> count = <span class="number">10</span> <span class="comment">//声明常量顶层属性</span></span><br><span class="line"><span class="comment">//对应Java中</span></span><br><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> int count = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名参数&quot;&gt;&lt;a href=&quot;#命名参数&quot; class=&quot;headerlink&quot; title=&quot;命名参数&quot;&gt;&lt;/a&gt;命名参数&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;kotlin中&lt;/code&gt;，调用一个函数时，可以显示的指明参数的名称。如果指明了一个参数名称，为了避免混淆，
      
    
    </summary>
    
    
      <category term="kotlin基础" scheme="http://hcydev.com/tags/kotlin%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin基础-流程控制语句</title>
    <link href="http://hcydev.com/2019/05/25/"/>
    <id>http://hcydev.com/2019/05/25/</id>
    <published>2019-05-25T13:45:49.000Z</published>
    <updated>2019-05-27T09:32:28.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>​        流程控制语句是编程语言中常用的核心之一，一般分为以下三类：</p><ul><li>分支语句(<code>if</code>、<code>when</code>)</li><li>循环语句(<code>for</code>、<code>while</code>)</li><li>跳转语句(<code>break</code>、<code>continue</code>、<code>return</code>、<code>throw</code>)</li></ul><h4 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h4><p>if-else语句是控制程序流程的最基本形式，其中else可选。在kotlin中if是一个表达式，即会有返回值。</p><p>代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">min</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="comment">//if  语句作为表达式</span></span><br><span class="line">    <span class="keyword">var</span> minValue = <span class="keyword">if</span> (a &gt; b) b <span class="keyword">else</span> a</span><br><span class="line">    <span class="keyword">return</span> minValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">min1</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="comment">//if  传统使用</span></span><br><span class="line">    <span class="keyword">var</span> minValue = a</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)  &#123;</span><br><span class="line">        minValue = b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">min2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="comment">//if  else</span></span><br><span class="line">    <span class="keyword">var</span> minValue: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        minValue = b</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        minValue = a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外if的分支可以是代码块，最后的表达式作为该块的值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">min3</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="comment">//if  代码块返回值</span></span><br><span class="line">    <span class="keyword">var</span> minValue: <span class="built_in">Int</span> =</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">                println(<span class="string">"Min is b"</span>)</span><br><span class="line">                b</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">"Min is a"</span>)</span><br><span class="line">                a</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> minValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if作为代码块时，最后一行为其返回值。</p><p>另外，在<code>kotlin</code>中没有类似 <code>true？1：0</code>这样的三元表达式，对应的写法是if表达式 <code>if(true) 1 else 0</code>。</p><p><code>if-else</code>使用规则：</p><ul><li><code>if</code> 后的括号不能省略，括号里表达式的类型须是布尔型；</li><li>如果条件体内只有一条语句需要执行，那么<code>if</code>后面的大括号可以省略，建议加上大括号，增加代码可读性；</li><li>对于给定的<code>if</code>，<code>else</code>语句是可选的，<code>else if</code>语句也是可选的。</li><li><code>else</code> 和 <code>else if</code>同时出现时，<code>else</code> 必须出现在<code>else if</code>之后；</li><li>如果有多条else if语句同时出现，那么如果有一条<code>else if</code>语句的表达式执行，那么会忽略掉其他所有的<code>else if</code>和<code>else</code>分支；</li><li>如果同时出现多个<code>if</code>，只有一个<code>else</code>的情形，<code>else</code>子句归属最内层的<code>if</code>语句。</li></ul><h4 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h4><p><code>when</code>表达式类似于<code>swich-case</code>表达式。<code>when</code>会对所有的分支进行检查直到有一个条件满足为止，相比于<code>switch</code>表达式，<code>when</code>表达式更加了灵活，更加强大：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">whenDemo</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; println(<span class="string">"匹配数字"</span>)</span><br><span class="line">        <span class="string">"Hello"</span> -&gt; println(<span class="string">"匹配字符串"</span>)</span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; println(<span class="string">"这是一个Long类型"</span>)</span><br><span class="line">        !<span class="keyword">is</span> String -&gt; println(<span class="string">"不是String类型"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">" defult"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像<code>if</code>一样，<code>when</code>每个一个分支也可以是一个代码块，它的值是最后的表达式的值。其他分支不满足会执行<code>else</code>分支。如果有多个分支条件需要用相同的方式处理，则可以把多个分支条件放在一起，用逗号隔开：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">swichDemo</span><span class="params">(x:<span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span>(x)&#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>-&gt; print(<span class="string">"x=1 or x=0"</span>)</span><br><span class="line">        <span class="number">2</span>-&gt;print(<span class="string">"x=2"</span>)</span><br><span class="line">        <span class="keyword">else</span>-&gt;&#123;</span><br><span class="line">            print(<span class="string">"other"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用表达式作为分支条件, 以及代码块作为值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">swichDemo</span><span class="params">(x: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"123"</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; print(<span class="string">"x=1 or x=0"</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; print(<span class="string">"x=2"</span>)</span><br><span class="line">        Integer.parseInt(s) -&gt; print(<span class="string">"x is 123"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            print(<span class="string">"other"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以检测一个值在(<code>in</code>)或者不在(<code>!in</code>) 一个区间或者集合中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">inWhenDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">        <span class="keyword">in</span> num -&gt; print(<span class="string">"x is num"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            print(<span class="string">"other"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环与Java中的for循环基本相同。</p><p>for循环可以对任意提供迭代器的对象进行遍历，语法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listOf = listOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> listOf)&#123;</span><br><span class="line">    print(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过下标遍历一个数组或者list，可以这样做：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> listOf.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"the element at <span class="variable">$index</span> is <span class="variable">$value</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayListOf = arrayListOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> (index <span class="keyword">in</span> arrayListOf.indices) &#123;</span><br><span class="line">    println(arrayListOf[index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while 和 do/while使用方式与Java 完全一致，代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x--</span><br><span class="line">    println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    y += <span class="number">1</span></span><br><span class="line">    println(y)</span><br><span class="line">&#125; <span class="keyword">while</span> (y &lt; <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><p>break和contiune都是用来控制循环结构的，break停止循环程序，continue控制中断一次循环程序。</p><h6 id="break"><a href="#break" class="headerlink" title="break"></a>break</h6><p>break用于完全结束一个循环，直接跳出循环体，然后执行循环体后面的语句。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">breakDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h6 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h6><p>continue终止本轮循环，继续下一次循环。 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">breakDemo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>注意与break的区别。</p><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>在kotlin中，除了表达式的值，又返回值的函数都要求显示地使用return在返回其值，代码中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum1</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max1</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在kotlin中可以直接使用=符号来返回一个函数的值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum12</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>kotlin中return语句会从最近的函数或匿名函数中返回，但是在lambda表达式中遇到return，则直接返回最近的函数，例如下面的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"START "</span> + ::returnDemo1.name)</span><br><span class="line">    <span class="keyword">var</span> intArrayOf = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    intArrayOf.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> (it==<span class="number">3</span>) <span class="keyword">return</span></span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"END "</span> + ::returnDemo1.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">START returnDemo1</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"START "</span> + ::returnDemo2.name)</span><br><span class="line">    <span class="keyword">var</span> intArrayOf = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    intArrayOf.forEach(<span class="function"><span class="title">fun</span><span class="params">(a: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">3</span>) <span class="keyword">return</span></span><br><span class="line">        println(a)</span><br><span class="line">    &#125;)</span><br><span class="line">    println(<span class="string">"END "</span> + ::returnDemo2.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">START returnDemo2</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">END returnDemo2</span><br></pre></td></tr></table></figure><p>观察最后输出结果，在<code>returnDemo1</code>中遇到3直接返回，类似于循环语句中<code>break</code>，在<code>returnDemo2</code>中遇到3会跳过继续执行，类似于循环体中的<code>continue</code>。在<code>returnDemo2</code>中用一个匿名函数代替<code>lambda</code>表达式，匿名函数内部的<code>return</code>语句将从该匿名函数自身返回。在kotlin中，这是匿名函数和<code>lambda</code>表达式不一致的地方。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>在kotlin中任何表达式都可以用标签(label)来标记。标签的格式为标识符后面跟@符号，例如：abc@,可以用标签来控制return、break、continue的跳转。</p><p>有了标签i、限制return，我们可以从外层函数返回了，例如在<code>lambda</code> 中返回，<code>returnDemo2</code> 中可以显示的指定<code>lambda</code>表达式中的return地址是其入口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"START "</span> + ::returnDemo3.name)</span><br><span class="line">    <span class="keyword">var</span> intArrayOf = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    intArrayOf.forEach <span class="symbol">here@</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">3</span>) <span class="keyword">return</span><span class="symbol">@here</span></span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"END "</span> + ::returnDemo3.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">START returnDemo3</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">END returnDemo3</span><br></pre></td></tr></table></figure><p>在<code>lambda</code>表达式开头添加了标签<code>here@</code>，该标签相当于是记录了<code>lambda</code>表达式的指令执行入口地址，然后表达式内部使用<code>return@here</code>跳转至<code>lambda</code>表达式该地址处。</p><p>也可以使用隐式标签更方便，该标签与接收该<code>lambda</code> 的函数同名。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"START "</span> + ::returnDemo4.name)</span><br><span class="line">    <span class="keyword">var</span> intArrayOf = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    intArrayOf.forEach&#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">3</span>) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"END "</span> + ::returnDemo4.name)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">START returnDemo4</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">END returnDemo4</span><br></pre></td></tr></table></figure><p>接收该<code>lambda</code>表达式的函数是<code>forEach</code> ，所有可以直接使用<code>return@forEach</code>跳转此处执行下一轮循环。</p><p>如果双重<code>for</code>循环时直接跳转到外层层循环，也可以使用标签：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo5</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="symbol">outer@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>) &#123;</span><br><span class="line">            println(<span class="string">"outer :<span class="variable">$i</span>"</span>)</span><br><span class="line">            println(<span class="string">"inter :<span class="variable">$j</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span><span class="symbol">@outer</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outer :<span class="number">1</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">outer :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br></pre></td></tr></table></figure><p>为了增加代码可读性，可以用标签来指明内层循环的跳转地址：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnDemo6</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"START "</span> + ::returnDemo6.name)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>) &#123;</span><br><span class="line">        println(<span class="string">"outer :<span class="variable">$i</span>"</span>)</span><br><span class="line">        <span class="symbol">inter@</span>  <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>) &#123;</span><br><span class="line">            println(<span class="string">"inter :<span class="variable">$j</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span><span class="symbol">@inter</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">START returnDemo6</span><br><span class="line">outer :<span class="number">1</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br><span class="line">outer :<span class="number">2</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br><span class="line">outer :<span class="number">3</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br><span class="line">outer :<span class="number">4</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br><span class="line">outer :<span class="number">5</span></span><br><span class="line">inter :<span class="number">1</span></span><br><span class="line">inter :<span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流程控制语句&quot;&gt;&lt;a href=&quot;#流程控制语句&quot; class=&quot;headerlink&quot; title=&quot;流程控制语句&quot;&gt;&lt;/a&gt;流程控制语句&lt;/h2&gt;&lt;p&gt;​        流程控制语句是编程语言中常用的核心之一，一般分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支
      
    
    </summary>
    
    
      <category term="kotlin基础" scheme="http://hcydev.com/tags/kotlin%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin基础-函数和变量</title>
    <link href="http://hcydev.com/2019/05/22/"/>
    <id>http://hcydev.com/2019/05/22/</id>
    <published>2019-05-22T00:57:45.000Z</published>
    <updated>2019-05-22T16:22:31.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>​        函数的声明是以关键字<code>fun</code> 开始，函数名称紧随其后,下面这个例子中函数名称是<code>max</code>,接下来是参数列表，参数列表后面跟这个返回值类型，他们之间用<code>:</code>分开</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>kotlin</code>中，<code>if</code>是有结果值的表达式。类似 于<code>kotlin</code>中的三元运算符 <code>(a&gt;b)?a:b</code>。</p><blockquote><p>语句和表达式</p><p>​        在kotlin中，if是表达式，而不是语句。语句和表达式的区别在于，表达式有值，并且能作为另一个表达式的一部分使用;而语句总是包围着它的代码中的顶层元素，并且没有自己的值。在<code>Java</code>中，所有的控制结构都是语句，而在<code>kotlin</code>中除了(for、do、和do/while)以外大多数控制结构都是表达式。</p></blockquote><h4 id="表达式函数体"><a href="#表达式函数体" class="headerlink" title="表达式函数体"></a>表达式函数体</h4><p>​        表达式函数体可以让上面的函数变的更简单，因为它的函数体是由单个表达式构成的，可以用表达式作为函数的函数体，并去掉花括号以及<code>return</code> 语句：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>​        每个表达式都有返回类型，但对于表达式函数体来说，编译器会分析作为函数体的表达式，并把它的类型作为函数的返回类型。只有表达式函数的返回类型可以省略，对于有返回值的代码块函数，必须显示地写出返回类型和<code>return</code> 语句。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>​        在<code>kotlin</code>中，一切都是对象。所以变量也是对象。</p><p>​        <code>kotlin</code> 的变量分为<code>var</code>(可变的)和<code>val</code>(不可变的)，可以理解为：</p><ul><li>var：是可写的，在生命周期内多次赋值。</li><li>val：只读的，仅能赋值一次，后面就不能被重新赋值。 </li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(arg: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> l = <span class="number">9L</span> <span class="comment">//自动推断出long 类型</span></span><br><span class="line">    l = <span class="number">67L</span></span><br><span class="line">    println(l)</span><br><span class="line">    println(l::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(l::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> b= <span class="string">"b"</span></span><br><span class="line"><span class="comment">//    b = "string" //报错 ：Val cannot be reassigned</span></span><br><span class="line">    println(b)</span><br><span class="line">    println(b::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(b::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">&#125;</span><br><span class="line">-----------</span><br><span class="line"><span class="number">67</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">kotlin</span>.<span class="title">Long</span></span></span><br><span class="line">long</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">kotlin</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br></pre></td></tr></table></figure><p>即使<code>var</code>关键字允许改变自己的值，但是他的类型是改变不了的。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = <span class="number">42</span></span><br><span class="line">answer = <span class="string">"Stirng"</span>   <span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure><h4 id="变量类型推断"><a href="#变量类型推断" class="headerlink" title="变量类型推断"></a>变量类型推断</h4><p>​        在<code>kotlin</code> 中大部分情况下不需要声明你使用对象的类型，编译器会直接推断出它的类型，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> str = <span class="string">"abc"</span></span><br><span class="line">    println(str <span class="keyword">is</span> String)</span><br><span class="line">    println(str)</span><br><span class="line">    println(str::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(str::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    true</span></span><br><span class="line"><span class="comment">//    abc</span></span><br><span class="line"><span class="comment">//    class kotlin.String</span></span><br><span class="line"><span class="comment">//    class java.lang.String</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> bool = <span class="literal">true</span></span><br><span class="line">    println(bool)</span><br><span class="line">    println(bool)</span><br><span class="line">    println(bool::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(bool::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    true</span></span><br><span class="line"><span class="comment">//    class kotlin.Boolean</span></span><br><span class="line"><span class="comment">//    boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    println(array)</span><br><span class="line">    println(array <span class="keyword">is</span> Array)</span><br><span class="line">    println(array::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(array::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    [Ljava.lang.Integer;@c2e1f26</span></span><br><span class="line"><span class="comment">//    true</span></span><br><span class="line"><span class="comment">//    class kotlin.Array</span></span><br><span class="line"><span class="comment">//    class [Ljava.lang.Integer;</span></span><br></pre></td></tr></table></figure><p>编译器能够检测到其类型，自动的完成类型转换，当然也可明确地指定变量类型。但是，类型推断不是所有的，例如，<code>Int</code>类型变量不能赋值<code>Long</code>  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Int2Long</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> a:<span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line">  <span class="keyword">val</span> b:<span class="built_in">Long</span> = a <span class="comment">//Type mismatch</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要显示的调用类型转换的函数进行转换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Int2Long</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> a:<span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line">  <span class="keyword">val</span> b:<span class="built_in">Long</span> = a <span class="comment">//Type mismatch</span></span><br><span class="line">  <span class="keyword">val</span> b:<span class="built_in">Long</span> = a.toLong()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><p>​        原始字符串由三重引号(“””)分隔。原始字符串可以包含换行符和任何其他字符串：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> string = <span class="string">"""hello world</span></span><br><span class="line"><span class="string">        世界</span></span><br><span class="line"><span class="string">        你好</span></span><br><span class="line"><span class="string">    """</span>.trimMargin()</span><br><span class="line">------------------------</span><br><span class="line">hello world</span><br><span class="line">        世界</span><br><span class="line">        你好</span><br></pre></td></tr></table></figure><p>字符串还可以包含模板表达式，模板表达式以美元符号$ 开始：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> tem = <span class="string">"string has <span class="subst">$&#123;string.length&#125;</span> characters"</span></span><br><span class="line">    println(tem)</span><br><span class="line">------------------------------------</span><br><span class="line">    string has <span class="number">33</span> characters</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h4 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h
      
    
    </summary>
    
    
      <category term="kotlin基础" scheme="http://hcydev.com/tags/kotlin%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>flutter基础</title>
    <link href="http://hcydev.com/2019/04/10/"/>
    <id>http://hcydev.com/2019/04/10/</id>
    <published>2019-04-10T15:39:26.318Z</published>
    <updated>2019-04-22T03:32:24.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flutter-基础"><a href="#flutter-基础" class="headerlink" title="flutter 基础"></a>flutter 基础</h2><p>as 类型转换</p><p>is 当对象是相应类型时返回 true</p><p>is! 当对象不是相应类型时返回true</p><p>a = value 赋值</p><p>b?? = value 如果b为空，则将值分配给b，否则 b保持不变</p><p>####条件表达式</p><p>Condition? Expr1:Expr2 三元表达式</p><p>如果expr1 为非空，则返回其值，否则，计算并返回expr2 的值</p><p>Expr1？？Expr2</p><h4 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">querySelector</span>(<span class="string">'#btnOK'</span>)</span><br><span class="line">  ..text=<span class="string">"确定"</span></span><br><span class="line">  ..onclick.listener((e)=&gt;<span class="built_in">window</span>.alert(<span class="string">'确定'</span>))</span><br></pre></td></tr></table></figure><h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><h4 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h4><p>容器组件(Container)包含一个Widget，自身具备alignment、padding等属性，方便布局过程中摆放child，常见属性如下，</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">Key</td><td style="text-align:center">Container唯一标识</td></tr><tr><td style="text-align:center">alignment</td><td style="text-align:center">AlignmentGeometry</td><td style="text-align:center">控制child对齐方式，Container或者Container的父节点尺寸大于child的尺寸，这个属性会起作用，</td></tr><tr><td style="text-align:center">padding</td><td style="text-align:center">EdgeInsetsGeometry</td><td style="text-align:center">内边距</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">Color</td><td style="text-align:center">Container背景色，foregroundDecoration设置的话会遮盖color效果</td></tr><tr><td style="text-align:center">decoration</td><td style="text-align:center">Decoration</td><td style="text-align:center">绘制在child后面的装饰，设置了Decoration的话，就不能设置color属性，否则会报错，此时应该在Decoration中进行颜色设置</td></tr><tr><td style="text-align:center">foregroundDecoration</td><td style="text-align:center">Decoration</td><td style="text-align:center">绘制在child前面的装饰</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">double</td><td style="text-align:center">Container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据child和父节点两者一起布局</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">double</td><td style="text-align:center">Container的高度，设置为double.infinity可以强制在高度上撑满</td></tr><tr><td style="text-align:center">constraints</td><td style="text-align:center">BoxConstraints</td><td style="text-align:center">添加到child上额外的约束条件</td></tr><tr><td style="text-align:center">margin</td><td style="text-align:center">EdgeInsetsGeometry</td><td style="text-align:center">外边距</td></tr><tr><td style="text-align:center">transform</td><td style="text-align:center">Matrix4</td><td style="text-align:center">设置Container的变换矩阵，类型为Matri4</td></tr><tr><td style="text-align:center">child</td><td style="text-align:center">Widget</td><td style="text-align:center">Container中的内容Widget</td></tr></tbody></table><h6 id="容器组件示例"><a href="#容器组件示例" class="headerlink" title="容器组件示例"></a>容器组件示例</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'容器组件实例'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'容器组件实例'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200.0</span>,</span><br><span class="line">            height: <span class="number">200.0</span>,</span><br><span class="line">            <span class="comment">//添加边框装饰</span></span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color: Colors.white,</span><br><span class="line">              border: <span class="keyword">new</span> Border.all(</span><br><span class="line">                color: Colors.grey,</span><br><span class="line">                width: <span class="number">8.0</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="comment">//边框的弧度</span></span><br><span class="line">              borderRadius: <span class="keyword">const</span> BorderRadius.all(<span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">            ),</span><br><span class="line"></span><br><span class="line">            child: Text(</span><br><span class="line">              <span class="string">'Flutter'</span>,</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">28.0</span>),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h4><p>图片组件(Image)是显示图像的组件，Image组件有多种构造函数：</p><ul><li>new Image:从ImageProvider获取图像。</li><li>new Image.asset:加载资源图片。</li><li>new Image.file:加载本地图片。</li><li>new Image.network:加载网络图片。</li><li>new Image.memory:加载Unit8List资源图片。</li></ul><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Width/height</td><td style="text-align:center">ImageProvider</td><td style="text-align:center">获取数据</td></tr><tr><td style="text-align:center">fit</td><td style="text-align:center">double</td><td style="text-align:center">图片填充模式</td></tr><tr><td style="text-align:center">colorBlendMode</td><td style="text-align:center">BlendMode</td><td style="text-align:center">对颜色混合处理</td></tr><tr><td style="text-align:center">alignment</td><td style="text-align:center">Alignment</td><td style="text-align:center">控制图片摆放位置</td></tr><tr><td style="text-align:center">repeat</td><td style="text-align:center">ImageRepeat</td><td style="text-align:center">设置图片重复模式</td></tr><tr><td style="text-align:center">centerSlice</td><td style="text-align:center">Rect</td><td style="text-align:center">当图片需要被拉伸显示时，centerSlice定义矩形区域会被拉伸，</td></tr><tr><td style="text-align:center">matchTextDirection</td><td style="text-align:center">bool</td><td style="text-align:center">matchTextDirection与Directionality配合使用，TextDirection有两个值分别为：TextDirection.ltr 从左到右展示图片，TextDirection.rtl从右到左展示图片</td></tr><tr><td style="text-align:center">gaplessPlayback</td><td style="text-align:center">bool</td><td style="text-align:center">当ImageProvider发生变化后，重新加载图片的过程中，原图片的展示是否保留，false不保留，直接空白等待下一张图片加载</td></tr></tbody></table><p>######图片组件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//图片组件</span><br><span class="line">class ImageDemo extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">        title: &apos;图片组件实例&apos;,</span><br><span class="line">        home: new Container(</span><br><span class="line">            child: new Image.network(</span><br><span class="line">          &apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1555047028590&amp;di=b735c56cef3184fe82412264cfff228c&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201504%2F03%2F20150403H1232_RJ2iV.jpeg&apos;,</span><br><span class="line">          fit: BoxFit.fitWidth,</span><br><span class="line">        )));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h4><p>文本组件(text)负责显示文本和定义显示样式，属性表</p><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;flutter-基础&quot;&gt;&lt;a href=&quot;#flutter-基础&quot; class=&quot;headerlink&quot; title=&quot;flutter 基础&quot;&gt;&lt;/a&gt;flutter 基础&lt;/h2&gt;&lt;p&gt;as 类型转换&lt;/p&gt;
&lt;p&gt;is 当对象是相应类型时返回 true&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
